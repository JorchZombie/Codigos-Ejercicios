hasta ahora sanemos que una clase heredada puede facimente extender algunas funcionalidades, simplemente añadiendo nuevos atributos y metodos o sobreescribiendo los ya existentes. Como en el ejemplo

  vehiculo {
    - color
    - ruedas
  }

  coche(vehiculo){
    - color
    - ruedas
    - velocidad (km/h)
    - cilindrada (cc)
  }
  
===> EL INCONVINIENTE MAS EVIDENTE DE IR SOBREESCRIBIENDO ES QUE TENEMOS QUE VOLVER A ESCRIBIR EL CODIGO DE LA SUPERCLASE Y LUEGO EL ESPECIFICO DE LA SUBCLASE <===

para evitarnos escribir codigo innecesario, podemos utilizar un truco que consiste en llamar el metodo de la superclase y luego simplemetne escribir el codigo de la clase:

vehiculo{
  - color
  - ruedas
}

coche(vehiculo){
  - vehiculo.__init__(self, color, ruedas)
  - velocidad
  - cilindrada
}

como tener que determinar constantemente la superclase puede ser dafastidioso, python nos permite utilizar un acceso directo mucho mascomodo llamada super()

hacerlo de esta forma ademas nos permite llamar comodamente los metodos o atributos de la superclase de especificar el self

vehiculo{
  - color
  - ruedas
}

coche(vehiculo){
  super().__init__(color, ruedas) => utilizamos super() sin self en lugar de vehiculo
  - velocidad
  - cilindrada
}

===================================================================>  EJERCICIO

utilizando esta nueva tecnica, extiende la clase vehiculo y realizala siguiente implementacion: 

vehiculo{
  color
  ruedas
}

coche(vehiculo){
  velocidad
  cilindrada
}

camioneta(coche){
  carga(Kg)
}

bicicleta(vehiculo){
  tipo (urbana/deportiva)
}

motocicleta(bicicleta){
  velocidad
  cilindrada
}

                  PUNTOS A REALIZAR
=> crea al menos un objeto de cada subclase y añadelos a una lista llamada vehiculos

=> realiza una funacion llamada catalogar() que reciba la lista de vehiculos y los recorra mostrando el nombre de su clase y atributos

=> modifica la funcion catalogar() para que reciba un argumento optativo ruedas, haciendo que muestre unicamente los que su numero de ruedas concuerde con el valor del argumento. Tambien debe mostrar un mensaje "se hanencontrado {} vehiculos con {} ruedas" unicamente si se envia el argumento ruedas. Ponla a prueba con 0, 2 y 4 ruedas como valor

